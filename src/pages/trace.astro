---
import Layout from '../layouts/Layout.astro';
import { ConfigLoader } from '../config/loader';
import { executeTrace } from '../server/trace';

const flowId = Astro.url.searchParams.get('flowId');
const config = ConfigLoader.getInstance().loadConfig();
const flow = config.flows.find(f => f.id === flowId);
export const prerender = false;

if (!flow || config.flows.length === 0) {
  return Astro.redirect('/');
}

const samplers = flow.samplers.map(samplerId =>
  config.samplers.find(s => s.id === samplerId)
).filter(Boolean);

const formSubmitted = Astro.url.searchParams.has('request_id');
let traceResults;

if (formSubmitted) {
  const variables = Object.fromEntries(Astro.url.searchParams.entries());
  traceResults = await executeTrace({ flowId, variables });
}
---
<Layout title={`Trace: ${flow.name}`}>
  <div class="container">
    <div class="header">
      <h1>
        <a href="/" class="home-link">AnyTrace</a>
        <span class="flow-name">{flow.name}</span>
        <span class="back-button">
          <a href="/">
            <svg viewBox="0 0 24 24" width="16" height="16">
              <path fill="currentColor" d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z"/>
            </svg>
          </a>
        </span>
      </h1>
    </div>
    
    <div class="trace-form">
      <form method="get">
        <input type="hidden" name="flowId" value={flowId} />
        {(() => {
          // Deduplicate variables by name
          const uniqueVars = new Map();
          samplers.forEach(sampler => {
            sampler.variables.forEach(variable => {
              const varConfig = config.samplers.find(s => 
                s.variables.some(v => v.name === variable.name)
              )?.variables.find(v => v.name === variable.name);
              
              if (!uniqueVars.has(variable.name)) {
                uniqueVars.set(variable.name, {
                  ...variable,
                  description: varConfig?.description || variable.name
                });
              }
            });
          });
          
          const variables = Array.from(uniqueVars.values());
          return (
            <table class="variables-table">
              <tbody>
                {variables.map(variable => (
                  <tr>
                    <td class="var-label">
                      {variable.description || variable.name.split('_').map(word => 
                        word.charAt(0).toUpperCase() + word.slice(1)
                      ).join(' ')}
                      {variable.required && <span class="required">*</span>}
                    </td>
                    <td class="var-input">
                      <input
                        type="text"
                        name={variable.name}
                        value={Astro.url.searchParams.get(variable.name) || ''}
                        required={variable.required}
                      />
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          );
        })()}
      </form>
    </div>

    {formSubmitted && (
      <div class="samplers-list">
        {traceResults.samplers.map(sampler => (
          <div class="sampler-item">
            <div class="sampler-header">
              <div style="display: flex; align-items: center;">
                <span class="sampler-status pending" data-sampler-id={sampler.id}>
                  <svg class="icon" viewBox="0 0 24 24">
                    <circle class="spinner" cx="12" cy="12" r="10"/>
                  </svg>
                </span>
                <h3>{sampler.name}</h3>
                <span class="toggle-output" onclick={`toggleOutput('${sampler.id}')`}>
                  <svg class="icon" viewBox="0 0 24 24" width="24" height="24">
                    <path d="M7 10l5 5 5-5H7z" />
                  </svg>
                </span>
              </div>
            </div>
            <div class="sampler-output" id={`output-${sampler.id}`}>
              <pre><code>Running...</code></pre>
            </div>
          </div>
        ))}
      </div>
    )}
    </div>
  </div>
  <script is:inline>
    function toggleOutput(samplerId) {
      const output = document.getElementById(`output-${samplerId}`);
      output.classList.toggle('expanded');
    }
  </script>
  <script>
    import { getStatusIcon } from '../components/icons';
    window.getStatusIcon = getStatusIcon;
  </script>
  {formSubmitted && (async function* () {
    const promises = traceResults.samplerPromises.map((promise, index) =>
      promise.then(finalResult => ({finalResult, index}))
    );

    // Create a pool of pending promises
    let pending = [...promises];

    while (pending.length > 0) {
      // Wait for the first promise to complete
      const completed = await Promise.race(pending);

      // Remove the completed promise from pending
      pending = pending.filter(p => p !== promises[completed.index]);

      console.log(`fragment ${completed.index} done: ${JSON.stringify(completed.finalResult)}`);

      // Yield the script tag for this result
      yield (<script is:inline set:html={`
        (function() {
          const result = ${JSON.stringify(completed.finalResult)};
          const samplerElement = document.querySelector('[data-sampler-id="${completed.finalResult.samplerId}"]');
          if (samplerElement) {
            const statusElement = samplerElement.querySelector('.sampler-status');
            const outputElement = samplerElement.querySelector('.sampler-output code');

            statusElement.className = 'sampler-status ' + result.status;
            statusElement.innerHTML = getStatusIcon(result.status);

            if (result.output || result.error) {
              outputElement.innerHTML = result.output || result.error;
            }
          }
        })();
      `}></script>);
    }
  })()}
</Layout>
