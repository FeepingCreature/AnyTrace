---
import Layout from '../layouts/Layout.astro';
import { ConfigLoader } from '../config/loader';
import { executeTrace } from '../server/trace';

const flowId = Astro.url.searchParams.get('flowId');
const config = ConfigLoader.getInstance().loadConfig();
const flow = config.flows.find(f => f.id === flowId);

if (!flow || config.flows.length === 0) {
  return Astro.redirect('/');
}

const samplers = flow.samplers.map(samplerId =>
  config.samplers.find(s => s.id === samplerId)
).filter(Boolean);

const formSubmitted = Astro.url.searchParams.has('request_id');
let traceResults = null;
if (formSubmitted) {
  const variables = Object.fromEntries(Astro.url.searchParams.entries());
  delete variables.flowId;
  traceResults = await executeTrace({ flowId, variables });
}
---
<Layout title={`Trace: ${flow.name}`}>
  <div class="container">
    <div class="header">
      <h1>{flow.name}</h1>
    </div>
    <a href="/" class="button secondary" style="margin-bottom: 2rem;">Back to Flows</a>
    
    <div class="trace-form">
      <h2>Execute Trace</h2>
      <form method="get">
        <input type="hidden" name="flowId" value={flowId} />
        {(() => {
          // Deduplicate variables by name
          const uniqueVars = new Map();
          samplers.forEach(sampler => {
            sampler.variables.forEach(variable => {
              const varConfig = config.samplers.find(s => 
                s.variables.some(v => v.name === variable.name)
              )?.variables.find(v => v.name === variable.name);
              
              if (!uniqueVars.has(variable.name)) {
                uniqueVars.set(variable.name, {
                  ...variable,
                  description: varConfig?.description || variable.name
                });
              }
            });
          });
          
          return Array.from(uniqueVars.values()).map(variable => (
            <div class="form-group">
              <label>
                {variable.description}
                {variable.required && <span class="required">*</span>}
              </label>
              <input
                type="text"
                name={variable.name}
                value={Astro.url.searchParams.get(variable.name) || ''}
                required={variable.required}
              />
            </div>
          ));
        })()}
        <div class="form-actions">
          <button type="submit" class="button primary">
            Execute
          </button>
        </div>
      </form>
    </div>

    {formSubmitted && (
      <div class="samplers-list">
        {traceResults.results.map(result => (
          <div class="sampler-item">
            <div class="sampler-header">
              <div style="display: flex; align-items: center;">
                <span class={`sampler-status ${result.status}`}>
                  {result.status === 'success' && (
                    <svg class="icon" viewBox="0 0 24 24">
                      <path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41L9 16.17z" />
                    </svg>
                  )}
                  {result.status === 'error' && (
                    <svg class="icon" viewBox="0 0 24 24">
                      <path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12 19 6.41z" />
                    </svg>
                  )}
                  {result.status === 'no-match' && (
                    <svg class="icon" viewBox="0 0 24 24">
                      <path d="M19 13H5v-2h14v2z" />
                    </svg>
                  )}
                </span>
                <h3>{result.name}</h3>
                <span class="toggle-output" onclick={`toggleOutput('${result.samplerId}')`}>
                  <svg class="icon" viewBox="0 0 24 24" width="24" height="24">
                    <path d="M7 10l5 5 5-5H7z" />
                  </svg>
                </span>
              </div>
            </div>
            <div class="sampler-output" id={`output-${result.samplerId}`}>
              <pre><code>{result.output || result.error || 'No matches found'}</code></pre>
            </div>
          </div>
        ))}
      </div>
    )}
    </div>
  </div>
</Layout>
